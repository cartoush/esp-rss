use anyhow::Result;
use display_interface_spi::SPIInterfaceNoCS;
use embedded_graphics::{
    mono_font::{ascii::FONT_10X20, iso_8859_16::FONT_9X18_BOLD, MonoTextStyle},
    pixelcolor::Rgb666,
    prelude::{Dimensions, Point, RgbColor, Size},
    primitives::{Primitive, PrimitiveStyleBuilder, Rectangle},
    text::Text,
    Drawable,
};
use embedded_svc::http::client::Client;
use esp_idf_sys::{self as _};

use std::error::Error;
use std::thread::sleep;
use std::time::Duration;

use esp_idf_hal::{delay, gpio::PinDriver, prelude::*, spi};
use esp_idf_svc::http::client::*;

use mipidsi::*;

use log::info;

mod freshrss;
mod serde_rss;
mod wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
    #[default("")]
    rss_domain: &'static str,
    #[default("")]
    rss_username: &'static str,
    #[default("")]
    rss_password: &'static str,
}

fn main() -> Result<(), Box<dyn Error>> {
    esp_idf_sys::link_patches();
    unsafe {
        esp_idf_sys::nvs_flash_init();
    };
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = esp_idf_svc::eventloop::EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // let spi_driver = spi::SpiDriver::new(peripherals.spi2, peripherals.pins.gpio14, peripherals.pins.gpio13, Some(peripherals.pins.gpio12), &spi::SpiDriverConfig::new());
    let my_spi = spi::SpiDeviceDriver::new_single(
        peripherals.spi2,
        peripherals.pins.gpio14,
        peripherals.pins.gpio13,
        Some(peripherals.pins.gpio12),
        Some(peripherals.pins.gpio15),
        &spi::SpiDriverConfig::new(),
        &spi::SpiConfig::new(),
    )?;
    // create a DisplayInterface from SPI and DC pin, with no manual CS control
    let di = SPIInterfaceNoCS::new(my_spi, PinDriver::output(peripherals.pins.gpio16)?);
    // create the ILI9486 display driver in rgb666 color mode from the display interface and use a HW reset pin during init
    // let mut display = Builder::ili9341_rgb666(di).init(delay, Some(rst));
    let mut display = Builder::ili9341_rgb666(di)
        .init(
            &mut delay::Ets,
            Some(PinDriver::output(peripherals.pins.gpio17)?),
        )
        .map_err(|e| anyhow::anyhow!("Display error : {:?}", e))?;

    display
        .set_orientation(Orientation::LandscapeInverted(true))
        .map_err(|e| anyhow::anyhow!("Display error : {:?}", e))?;

    info!("SIZE : {:?}", display.bounding_box().size);
    Rectangle::new(
        display.bounding_box().top_left,
        Size::new(
            display.bounding_box().size.height,
            display.bounding_box().size.width,
        ),
    )
    .into_styled(
        PrimitiveStyleBuilder::new()
            .fill_color(Rgb666::RED)
            .stroke_color(Rgb666::RED)
            .stroke_width(1)
            .build(),
    )
    .draw(&mut display)
    .map_err(|e| anyhow::anyhow!("Display error : {:?}", e))?;

    let style = MonoTextStyle::new(&FONT_9X18_BOLD, Rgb666::BLACK);
    Text::new("Hello Rust!", Point::new(20, 30), style)
        .draw(&mut display)
        .map_err(|e| anyhow::anyhow!("Display error : {:?}", e))?;

    // Connect to the Wi-Fi network
    let _wifi = wifi::wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    let conn = EspHttpConnection::new(&Configuration {
        use_global_ca_store: true,
        crt_bundle_attach: Some(esp_idf_sys::esp_crt_bundle_attach),
        ..Default::default()
    })?;
    let mut cli = Client::wrap(conn);

    let auth_string = freshrss::freshrss_connect(
        &mut cli,
        app_config.rss_domain,
        app_config.rss_username,
        app_config.rss_password,
    )?;

    let str_articles =
        freshrss::freshrss_get_articles(&mut cli, &auth_string, app_config.rss_domain)?;
    let articles: serde_rss::RssReadingList = serde_json::from_str(str_articles.as_str())?;

    info!("articles : {:?}", articles);

    loop {
        sleep(Duration::from_millis(1000));
    }
}
