use embedded_svc::http::client::Client;
use esp_idf_sys::{self as _};
use anyhow::Result;

use std::error::Error;
use std::thread::sleep;
use std::time::Duration;

use esp_idf_hal::prelude::*;
use esp_idf_svc::http::client::*;

use log::info;

mod wifi;
mod serde_rss;
mod freshrss;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
    #[default("")]
    rss_domain: &'static str,
    #[default("")]
    rss_username: &'static str,
    #[default("")]
    rss_password: &'static str,
}

fn main() -> Result<(), Box<dyn Error>> {

    esp_idf_sys::link_patches();
    unsafe {
        esp_idf_sys::nvs_flash_init();
    };
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = esp_idf_svc::eventloop::EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi::wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    let conn = EspHttpConnection::new(&Configuration{
        use_global_ca_store: true,
        crt_bundle_attach: Some(esp_idf_sys::esp_crt_bundle_attach),
        ..Default::default()
    })?;
    let mut cli = Client::wrap(conn);

    let auth_string = freshrss::freshrss_connect(&mut cli, app_config.rss_domain, app_config.rss_username, app_config.rss_password)?;

    let str_articles = freshrss::freshrss_get_articles(&mut cli, &auth_string, app_config.rss_domain)?;
    let articles: serde_rss::RssReadingList = serde_json::from_str(str_articles.as_str())?;

    info!("articles : {:?}", articles);

    loop {
        sleep(Duration::from_millis(1000));
    }
}
